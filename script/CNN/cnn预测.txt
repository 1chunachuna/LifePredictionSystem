import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv1D, MaxPooling1D, Flatten

# 读取训练集和验证集数据
train_data = pd.read_csv(r"C:\Users\lenovooo\Desktop\新建文件夹\train_file.txt",sep=' '，header=None)
test_data = pd.read_csv(r"C:\Users\lenovooo\Desktop\新建文件夹\test_file .csv",sep=' ',header=None)

# 删训练集的列
train_data=train_data.drop(train_data.columns[[26]],axis=1)
train_data = train_data.drop(train_data.columns[[4]], axis=1)
train_data = train_data.drop(train_data.columns[[4]], axis=1)
train_data = train_data.drop(train_data.columns[[7]], axis=1)
train_data = train_data.drop(train_data.columns[[11]], axis=1)
train_data = train_data.drop(train_data.columns[[16]], axis=1)
train_data = train_data.drop(train_data.columns[[17]], axis=1)
train_data = train_data.drop(train_data.columns[[17]], axis=1)
train_data = train_data.drop(train_data.columns[[0]], axis=1)
train_data = train_data.drop(train_data.columns[[0]], axis=1)
#以下根据选取的关键的特征进行删列
train_data=train_data.drop(train_data.columns[[0]],axis=1)
train_data=train_data.drop(train_data.columns[[0]],axis=1)
train_data=train_data.drop(train_data.columns[[3]],axis=1)
# 删验证集的列
test_data=test_data.drop(test_data.columns[[26]],axis=1)
test_data = test_data.drop(test_data.columns[[4]], axis=1)
test_data = test_data.drop(test_data.columns[[4]], axis=1)
test_data = test_data.drop(test_data.columns[[7]], axis=1)
test_data = test_data.drop(test_data.columns[[11]], axis=1)
test_data = test_data.drop(test_data.columns[[16]], axis=1)
test_data = test_data.drop(test_data.columns[[17]], axis=1)
test_data = test_data.drop(test_data.columns[[17]], axis=1)
test_data = test_data.drop(test_data.columns[[0]], axis=1)
test_data =test_data.drop(test_data.columns[[0]], axis=1)
#以下根据选取的关键的特征进行删列
test_data=test_data.drop(test_data.columns[[0]],axis=1)
test_data=test_data.drop(test_data.columns[[0]],axis=1)
test_data=test_data.drop(test_data.columns[[3]],axis=1)
# 分离特征和目标变量
X_train = train_data.iloc[:, :-1]  
X_test = test_data.iloc[:, :-1]

y_train = train_data.iloc[:, -1]    
y_test = test_data.iloc[:, -1]   

from tensorflow.keras.models import Sequential  
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense, Dropout  
from tensorflow.keras.optimizers import Adam, RMSprop
from tensorflow.keras.regularizers import l2

# 构建CNN模型  
model = Sequential()  
model.add(Conv1D(128, kernel_size=4, activation='tanh', input_shape=(X_train.shape[1], 1), kernel_regularizer=l2(0.001)))  
model.add(MaxPooling1D(pool_size=2))  
model.add(Conv1D(128, kernel_size=4, activation='tanh'))  
model.add(MaxPooling1D(pool_size=2))
model.add(Flatten())  
model.add(Dense(4, activation='tanh',kernel_regularizer=l2(0.001))) # 添加全连接层  
model.add(Dropout(0.1))  # 添加Dropout层  
model.add(Dense(1, activation='linear'))  

# 编译模型
from keras.optimizers import SGD
optimizer = SGD(learning_rate=0.001)
model.compile(loss='mse', optimizer=optimizer, metrics=['mse'])
history = model.fit(X_train, y_train, epochs=50, batch_size=32,validation_data=(X_test, y_test))
from sklearn.metrics import mean_squared_error
from keras.models import load_model  
# 用模型预测测试集  
y_pred = model.predict(X_test)  
  # 计算均方误差并输出得分  
mse =np.sqrt( mean_squared_error(y_test, y_pred))
print(f'Mean Squared Error on Test Set: {mse}')
def calculate_Si(y_pred,y_test):
    Si_values=np.zeros_like(y_pred)
    for i in range(len(y_pred)):
        if y_pred[i]<y_test[i]:
            Si_values[i]=np.exp((y_test[i]-y_pred[i])/13)-1
        elif y_pred[i]>y_test[i]:
            Si_values[i]=np.exp((y_pred[i]-y_test[i])/13)-1
    return Si_values
Si_values=calculate_Si(y_pred,y_test)
total_score=np.sum(Si_values)
print(f"Total Score: {total_score}")